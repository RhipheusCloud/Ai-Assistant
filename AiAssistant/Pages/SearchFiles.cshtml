@page
@model SearchFilesModel
@{
    ViewData["Title"] = "Chat";
}

<div class="chat-container">

    <!-- Container Selection -->
    <div class="container-selection">
        <div class="select-container">
            <select id="channelSelect" name="SelectedChannel" class="channel-select" asp-for="SelectedChannel">
                @foreach (var container in Model.Containers)
                {
                    <option value="@container">@container</option>
                }
            </select>
        </div>
    </div>

    <div class="chat-messages-container">
        <div class="chat-messages" id="chatMessages">
            @if (Model.SearchHistory != null)
            {
                foreach (var entry in Model.SearchHistory)
                {
                    <div class="message user-message">
                        <div class="message-metadata">Channel: @entry.Container</div>
                        <p>@entry.Query</p>
                    </div>
                    <div class="message ai-message">
                        <p>@entry.Response</p>
                    </div>
                }
            }
        </div>
    </div>

    <div class="chat-input-area">
        <form id="chatForm" data-handler="Search">
            @Html.AntiForgeryToken()
            <input type="hidden" name="selectedChannel" id="selectedChannelInput" value="@Model.SelectedChannel" />
            <div class="input-group">
                <textarea name="searchInput" id="messageInput" class="chat-input"
                          placeholder="Type your message here..." rows="1" required></textarea>
                <div class="input-actions">
                    <button type="submit" class="chat-button" id="sendButton">
                        Send <i class="fas fa-paper-plane ms-1"></i>
                    </button>
                </div>
            </div>
        </form>
        <div class="input-footer">
            <span>Powered by Azure OpenAI</span>
            <span>Model: GPT-4</span>
        </div>
    </div>
</div>

<style>

    .chat-title {
        margin: 0;
        font-size: 24px;
    }

    .container-selection {
        padding: 15px 20px;
        display: flex;
        justify-content: flex-end; /* Align dropdown to the right */
    }

    .select-container {
        max-width: 500px;
        position: relative;
    }


        .select-container::after {
            content: '▼';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            pointer-events: none;
        }

    .channel-select {
        width: 100%;
        padding: 12px 35px 12px 15px;
        border: 2px solid #e0e0e0;
        background: white;
        color: #333;
        border-radius: 6px;
        font-size: 15px;
        cursor: pointer;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        transition: all 0.3s ease;
    }

        .channel-select:hover {
            border-color: #7c4dff;
            box-shadow: 0 2px 5px rgba(124, 77, 255, 0.2);
        }

        .channel-select:focus {
            outline: none;
            border-color: #7c4dff;
            box-shadow: 0 0 0 3px rgba(124, 77, 255, 0.2);
        }

    .chat-messages-container {
        flex: 1;
        overflow-y: hidden;
        position: relative;
        background: #fff;
    }

    .chat-messages {
        height: 100%;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
    }

    .message {
        margin-bottom: 20px;
        max-width: 80%;
    }

    .user-message {
        background: #e3f2fd;
        padding: 15px;
        border-radius: 15px 15px 5px 15px;
        margin-left: 20%;
        align-self: flex-end;
    }

    .ai-message {
        background: #f5f5f5;
        padding: 15px;
        border-radius: 15px 15px 15px 5px;
        margin-right: 20%;
        align-self: flex-start;
    }

    .message-metadata {
        font-size: 12px;
        color: #666;
        margin-bottom: 5px;
    }

    .chat-input-area {
        padding: 20px;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

    .input-group {
        display: flex;
        gap: 10px;
        align-items: flex-start;
    }

    .chat-input {
        flex: 1;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        font-size: 15px;
        resize: none;
        transition: all 0.3s ease;
        min-height: 45px;
        max-height: 150px;
    }

        .chat-input:focus {
            outline: none;
            border-color: #7c4dff;
            box-shadow: 0 0 0 3px rgba(124, 77, 255, 0.2);
        }

    .chat-button {
        background-color: #7c4dff;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        font-size: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        height: 45px;
        white-space: nowrap;
    }

        .chat-button:hover {
            background-color: #6c3cef;
        }

        .chat-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

    .input-footer {
        margin-top: 10px;
        display: flex;
        justify-content: space-between;
        color: #666;
        font-size: 12px;
    }

    .loading-message {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        color: #666;
    }

    .message-error {
        color: #dc3545;
        font-style: italic;
    }

    .loading-dots::after {
        content: '';
        animation: dots 1.5s infinite;
    }

    @@keyframes dots {
        0%, 20% {
            content: '.';
        }

        40% {
            content: '..';
        }

        60% {
            content: '...';
        }

        80%, 100% {
            content: '';
        }
    }
</style>

@section Scripts {
    <script>
        // Auto-resize textarea
        const textarea = document.querySelector('.chat-input');
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 150) + 'px';
        });

        // Handle form submission
        document.getElementById('chatForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const message = messageInput.value.trim();

            if (!message) return;

            // Disable inputs during submission
            messageInput.disabled = true;
            sendButton.disabled = true;

            // Show user message first (right side)
            const chatMessages = document.getElementById('chatMessages');
            const selectedChannel = document.getElementById('channelSelect').value;
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user-message';
            userMessageDiv.innerHTML = `
                <div class="message-metadata">Channel: ${selectedChannel}</div>
                <p>${message}</p>
            `;
            chatMessages.appendChild(userMessageDiv);
            scrollToBottom();

            // Add loading message second (left side)
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'message ai-message';
            loadingDiv.innerHTML = '<div class="loading-message"><span class="loading-dots">Thinking</span></div>';
            chatMessages.appendChild(loadingDiv);
            scrollToBottom();

            try {
                // Prepare form data
                const formData = new FormData();
                formData.append('searchInput', message);
                formData.append('selectedChannel', selectedChannel);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                // Send request
                const response = await fetch('?handler=Search', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();

                // Remove loading message
                loadingDiv.remove();

                // Add AI response (left side)
                const aiMessageDiv = document.createElement('div');
                aiMessageDiv.className = 'message ai-message';
                aiMessageDiv.innerHTML = `<p>${data.response}</p>`;
                chatMessages.appendChild(aiMessageDiv);

            } catch (error) {
                console.error('Error:', error);
                loadingDiv.innerHTML = '<div class="message-error">An error occurred. Please try again.</div>';
            }

            // Re-enable inputs
            messageInput.value = '';
            messageInput.disabled = false;
            sendButton.disabled = false;
            scrollToBottom();
        });

        // Update hidden input when channel changes
        document.getElementById('channelSelect').addEventListener('change', function() {
            document.getElementById('selectedChannelInput').value = this.value;
        });

        // Scroll to bottom of chat
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Call scrollToBottom on page load
        window.onload = scrollToBottom;
    </script>
}