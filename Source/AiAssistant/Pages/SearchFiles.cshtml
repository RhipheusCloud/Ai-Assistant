@page
@model SearchFilesModel
@{
    ViewData["Title"] = "Chat";
}

<!-- Add Marked.js library for Markdown parsing -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.2/marked.min.js"></script>

<div class="chat-container">
    <!-- Container Selection -->
    <div class="container-selection">
        <div class="select-container">
            <select id="channelSelect" name="SelectedChannel" class="channel-select" asp-for="SelectedChannel">
                @foreach (var container in Model.Containers)
                {
                    <option value="@container">@(container.Equals("General", StringComparison.OrdinalIgnoreCase) ? "(General)" : container)</option>
                }
            </select>
        </div>
    </div>

    <div class="chat-messages-container">
        <div class="chat-messages" id="chatMessages">
            @if (Model.SearchHistory != null)
            {
                foreach (var entry in Model.SearchHistory)
                {
                    <div class="message user-message">
                        <div class="message-metadata">Channel: @entry.Container</div>
                        <p>@entry.Query</p>
                    </div>
                    <div class="message ai-message">
                        <p>@entry.Response</p>
                    </div>
                }
            }
        </div>
    </div>

    <div class="chat-input-area">
        <form id="chatForm" data-handler="Search">
            @Html.AntiForgeryToken()
            <input type="hidden" name="selectedChannel" id="selectedChannelInput" value="@Model.SelectedChannel" />
            <div class="input-group">
                <textarea name="searchInput" id="messageInput" class="chat-input"
                          placeholder="Type your message here..." rows="1" required></textarea>
                <div class="input-actions">
                    <button type="submit" class="chat-button" id="sendButton">
                        Send <i class="fas fa-paper-plane ms-1"></i>
                    </button>
                </div>
            </div>
        </form>
        <div class="input-footer">
            <span>Powered by Azure OpenAI</span>
            <span>Model: GPT-4</span>
        </div>
    </div>
</div>

<style>
    .chat-title {
        margin: 0;
        font-size: 24px;
    }

    .container-selection {
        padding: 15px 20px;
        display: flex;
        justify-content: flex-end;
    }

    .select-container {
        max-width: 500px;
        position: relative;
    }

        .select-container::after {
            content: '▼';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            pointer-events: none;
        }

    .channel-select {
        width: 100%;
        padding: 12px 35px 12px 15px;
        border: 2px solid #e0e0e0;
        background: white;
        color: #333;
        border-radius: 6px;
        font-size: 15px;
        cursor: pointer;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        transition: all 0.3s ease;
    }

        .channel-select:hover {
            border-color: #7c4dff;
            box-shadow: 0 2px 5px rgba(124, 77, 255, 0.2);
        }

        .channel-select:focus {
            outline: none;
            border-color: #7c4dff;
            box-shadow: 0 0 0 3px rgba(124, 77, 255, 0.2);
        }

    .chat-messages-container {
        flex: 1;
        overflow-y: hidden;
        position: relative;
        background: #fff;
        height: calc(100vh - 250px); /* Adjust height to prevent overflow */
    }

    .chat-messages {
        height: 100%;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
    }

    .message {
        margin-bottom: 20px;
        max-width: 80%;
    }

    .user-message {
        background: #e3f2fd;
        padding: 15px;
        border-radius: 15px 15px 5px 15px;
        margin-left: 20%;
        align-self: flex-end;
    }

    .ai-message {
        background: #f5f5f5;
        padding: 15px;
        border-radius: 15px 15px 15px 5px;
        margin-right: 20%;
        align-self: flex-start;
    }

    .message-metadata {
        font-size: 12px;
        color: #666;
        margin-bottom: 5px;
    }

    .chat-input-area {
        padding: 20px;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

    .input-group {
        display: flex;
        gap: 10px;
        align-items: flex-start;
    }

    .chat-input {
        flex: 1;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        font-size: 15px;
        resize: none;
        transition: all 0.3s ease;
        min-height: 45px;
        max-height: 150px;
    }

        .chat-input:focus {
            outline: none;
            border-color: #7c4dff;
            box-shadow: 0 0 0 3px rgba(124, 77, 255, 0.2);
        }

    .chat-button {
        background-color: #7c4dff;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        font-size: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        height: 45px;
        white-space: nowrap;
    }

        .chat-button:hover {
            background-color: #6c3cef;
        }

        .chat-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

    .input-footer {
        margin-top: 10px;
        display: flex;
        justify-content: space-between;
        color: #666;
        font-size: 12px;
    }

    .loading-message {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        color: #666;
    }

    .message-error {
        color: #dc3545;
        font-style: italic;
    }

    .loading-dots::after {
        content: '';
        animation: dots 1.5s infinite;
    }

    @@keyframes dots {
        0%, 20%

    {
        content: '.';
    }

    40% {
        content: '..';
    }

    60% {
        content: '...';
    }

    80%, 100% {
        content: '';
    }

    }

    /* Citation Panel Styling - Similar to Microsoft's Python app */
    .citations-dropdown {
        position: fixed;
        right: 0;
        top: 0;
        width: 420px;
        height: 100vh;
        background: white;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: none;
        flex-direction: column;
        overflow: hidden;
        border-left: 1px solid #ddd;
    }

        .citations-dropdown.show {
            display: flex;
        }

    .citations-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        border-bottom: 1px solid #e9ecef;
        font-weight: 600;
        font-size: 18px;
        background-color: #fff;
    }

    .citations-close {
        cursor: pointer;
        font-size: 22px;
        color: #6c757d;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        margin-left: auto;
    }

        .citations-close:hover {
            color: #343a40;
            background-color: #f8f9fa;
        }

    .citations-body {
        padding: 0;
        overflow-y: auto;
        height: calc(100vh - 60px);
    }

    .citation-item {
        padding: 0;
        border-bottom: 1px solid #eee;
    }

        .citation-item.active {
            background-color: #f8f9fa;
        }

    .citation-doc-header {
        padding: 12px 16px;
        font-weight: 600;
        background-color: #f8f9fa;
        border-bottom: 1px solid #eee;
        font-size: 16px;
    }

    .citation-doc-content {
        padding: 16px;
        font-size: 14px;
        line-height: 1.6;
        color: #333;
        white-space: pre-line;
    }

    /* Inline citation styling - make it look like a link */
    .citation-link {
        color: #0d6efd;
        cursor: pointer;
        text-decoration: none;
        margin: 0 1px;
        display: inline;
    }

        .citation-link:hover {
            text-decoration: underline;
        }

    /* References section styling - update these styles */
    .references-section {
        margin-top: 16px;
        border-top: 1px solid #e9ecef;
        padding-top: 16px;
    }

        .references-section h6 {
            color: #495057;
            margin-bottom: 12px;
            font-weight: 600;
        }

    .references-container {
        padding: 0;
        margin-top: 8px;
        display: block;
    }

    .reference-item {
        padding: 8px 10px;
        margin-bottom: 4px;
        display: flex;
        align-items: flex-start;
        border-radius: 4px;
        transition: background-color 0.2s;
    }

        .reference-item:hover {
            background-color: #f8f9fa;
        }

        .reference-item a {
            color: #0d6efd;
            text-decoration: none;
        }

            .reference-item a:hover {
                text-decoration: underline;
            }

    /* Citation panel styling */
    .citations-dropdown {
        position: fixed;
        right: 0;
        top: 0;
        width: 420px;
        height: 100vh;
        background: white;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: none;
        flex-direction: column;
        overflow: hidden;
        border-left: 1px solid #ddd;
    }

        .citations-dropdown.show {
            display: flex;
        }

    .citations-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        border-bottom: 1px solid #e9ecef;
        font-weight: 600;
        font-size: 18px;
        background-color: #fff;
    }

    .citations-close {
        cursor: pointer;
        font-size: 22px;
        color: #6c757d;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        margin-left: auto;
    }

    /* Markdown content styling */
    .markdown-content {
        line-height: 1.6;
        color: #333;
    }

        .markdown-content h1 {
            font-size: 1.8rem;
            margin-top: 20px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
        }

        .markdown-content h2 {
            font-size: 1.5rem;
            margin-top: 18px;
            margin-bottom: 14px;
            font-weight: 600;
            line-height: 1.25;
        }

        .markdown-content h3 {
            font-size: 1.25rem;
            margin-top: 16px;
            margin-bottom: 12px;
            font-weight: 600;
            line-height: 1.25;
            color: #333;
        }

        .markdown-content h4 {
            font-size: 1.1rem;
            margin-top: 14px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .markdown-content h5, .markdown-content h6 {
            font-size: 0.95rem;
            margin-top: 12px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .markdown-content p {
            margin-top: 0;
            margin-bottom: 16px;
        }

        .markdown-content blockquote {
            padding: 0 1em;
            color: #6a737d;
            border-left: 0.25em solid #dfe2e5;
            margin: 0 0 16px 0;
        }

        .markdown-content pre {
            padding: 16px;
            overflow: auto;
            font-size: 85%;
            line-height: 1.45;
            background-color: #f6f8fa;
            border-radius: 3px;
            margin-bottom: 16px;
        }

        .markdown-content code {
            padding: 0.2em 0.4em;
            margin: 0;
            font-size: 85%;
            background-color: rgba(27, 31, 35, 0.05);
            border-radius: 3px;
        }

        .markdown-content pre code {
            background-color: transparent;
            padding: 0;
        }

        .markdown-content ul, .markdown-content ol {
            padding-left: 2em;
            margin-top: 0;
            margin-bottom: 16px;
        }

        .markdown-content li {
            margin-bottom: 6px;
        }

            .markdown-content li > ul, .markdown-content li > ol {
                margin-top: 6px;
                margin-bottom: 0;
            }

        .markdown-content table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 16px;
        }

            .markdown-content table th, .markdown-content table td {
                padding: 8px 12px;
                border: 1px solid #dfe2e5;
            }

            .markdown-content table th {
                font-weight: 600;
                background-color: #f6f8fa;
            }

        .markdown-content img {
            max-width: 100%;
            box-sizing: content-box;
            background-color: #fff;
        }

        .markdown-content hr {
            height: 0.25em;
            padding: 0;
            margin: 24px 0;
            background-color: #e1e4e8;
            border: 0;
        }

        .markdown-content strong {
            font-weight: 600;
        }
</style>

@section Scripts {
    <script>
        // Auto-resize textarea
        const textarea = document.querySelector('.chat-input');
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 150) + 'px';
        });

        // Handle Enter key
        textarea.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const form = document.getElementById('chatForm');
                const button = document.getElementById('sendButton');
                if (form && !button.disabled && this.value.trim().length > 0) {
                    form.dispatchEvent(new Event('submit'));
                }
            }
        });

        // Update hidden input when channel changes
        document.getElementById('channelSelect').addEventListener('change', function() {
            document.getElementById('selectedChannelInput').value = this.value;
        });

        // Scroll to bottom of chat
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Call scrollToBottom on page load
        window.onload = scrollToBottom;

        // Define the markdown parser function
        function parseMarkdown(text) {
            if (typeof marked === 'undefined') {
                console.warn('Marked library not loaded yet');
                return text;
            }

            // Configure marked options
            marked.setOptions({
                breaks: true,       // Add <br> on a single line break
                gfm: true,          // Use GitHub Flavored Markdown
                headerIds: true,    // Add IDs to headers
                mangle: false,      // Don't mangle header IDs
                smartLists: true    // Use smarter list behavior
            });

            return marked.parse(text);
        }

        // Add citations UI elements to the body
        document.addEventListener('DOMContentLoaded', function() {
            const citationsUIElements = `
                <div class="citations-overlay" id="citationsOverlay"></div>
                <div class="citations-dropdown" id="citationsDropdown">
                    <div class="citations-header">
                        <span>Citations</span>
                        <span class="citations-close" id="closeCitations">&times;</span>
                    </div>
                    <div class="citations-body" id="citationsBody">
                        <!-- Citation items will be added here dynamically -->
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', citationsUIElements);

            // Set up event listeners for citations UI
            document.getElementById('closeCitations').addEventListener('click', closeCitationsPanel);
            document.getElementById('citationsOverlay').addEventListener('click', closeCitationsPanel);
        });

        // Citation functions
        function updateCitationsPanel(citations) {
            // We'll update the panel only when actually showing a citation
            // This function is kept for compatibility but we're not populating
            // all citations at once anymore
            window.currentCitations = citations;
        }

        function showCitation(citationNumber) {
            const citationsDropdown = document.getElementById('citationsDropdown');
            const citationsOverlay = document.getElementById('citationsOverlay');
            const citationsBody = document.getElementById('citationsBody');

            // Make sure we have citations to show
            if (!window.currentCitations || window.currentCitations.length === 0) return;

            // Find the citation with the matching index
            const citation = window.currentCitations.find(c => c.index === citationNumber);
            if (!citation) return;

            // Clear previous citations and only show the clicked one
            citationsBody.innerHTML = '';

            // Create a single citation item for the selected document
            const citationItem = document.createElement('div');
            citationItem.className = 'citation-item';
            citationItem.dataset.index = citation.index;

            // Use the document name and content from the response
            const previewContent = `
                <div class="citation-doc-header">${citation.source}</div>
                <div class="citation-doc-content">${citation.content}</div>
            `;

            citationItem.innerHTML = previewContent;
            citationsBody.appendChild(citationItem);

            // Show the citations panel and overlay
            citationsDropdown.classList.add('show');
            citationsOverlay.classList.add('show');
        }

        function closeCitationsPanel() {
            const citationsDropdown = document.getElementById('citationsDropdown');
            const citationsOverlay = document.getElementById('citationsOverlay');

            citationsDropdown.classList.remove('show');
            citationsOverlay.classList.remove('show');
        }

        function toggleReferences(button) {
            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            button.setAttribute('aria-expanded', !isExpanded);

            const referencesContainer = button.nextElementSibling;
            if (isExpanded) {
                referencesContainer.classList.remove('show');
            } else {
                referencesContainer.classList.add('show');
            }
        }

        // Handle form submission with simulated streaming
        document.getElementById('chatForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const message = messageInput.value.trim();

            if (!message) return;

            // Disable inputs during submission
            messageInput.disabled = true;
            sendButton.disabled = true;

            // Show user message first (right side)
            const chatMessages = document.getElementById('chatMessages');
            const selectedChannel = document.getElementById('channelSelect').value;
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user-message';
            userMessageDiv.innerHTML = `
                <div class="message-metadata">Channel: ${selectedChannel}</div>
                <p>${message}</p>
            `;
            chatMessages.appendChild(userMessageDiv);
            scrollToBottom();

            // Create AI message with loading indicator (left side)
            const aiMessageDiv = document.createElement('div');
            aiMessageDiv.className = 'message ai-message';

            // Create content container for streaming text
            const contentDiv = document.createElement('div');
            contentDiv.className = 'markdown-content';
            contentDiv.innerHTML = '<div class="loading-message"><span class="loading-dots">Thinking</span></div>';
            aiMessageDiv.appendChild(contentDiv);

            // Add the message div to the chat
            chatMessages.appendChild(aiMessageDiv);
            scrollToBottom();

            try {
                // Prepare form data
                const formData = new FormData();
                formData.append('searchInput', message);
                formData.append('selectedChannel', selectedChannel);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                // Send request
                const response = await fetch('?handler=Search', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) throw new Error('Network response was not ok');

                const data = await response.json();

                // Process the response and format citations
                const formattedResponse = data.response;
                window.currentCitations = data.citations || [];

                // Create a citation mapping object for quick lookup
                const citationMap = {};
                window.currentCitations.forEach(citation => {
                    citationMap[citation.index] = citation.source;
                });

                // Simulate streaming by adding characters gradually
                let displayedText = '';
                // Also clean up any direct mentions of filenames that aren't in brackets
                function removeFilenameReferences(text) {
                    // First remove any bracketed references
                    let cleaned = text
                        .replace(/\[doc\d+\]/g, '')
                        .replace(/\[\w+\.\w+\]/g, '');

                    // Then look for common file extensions that aren't in brackets
                    // but be careful not to remove legitimate uses of these words
                    const fileExtensions = ['pdf', 'doc', 'docx', 'txt', 'xls', 'xlsx'];

                    // For each file extension, look for word.ext patterns
                    fileExtensions.forEach(ext => {
                        // This regex looks for word.ext patterns but not within other words
                        const regex = new RegExp(`\\b\\w+\\.${ext}\\b`, 'g');
                        cleaned = cleaned.replace(regex, '');
                    });

                    // Clean up any resulting grammar issues
                    return cleaned
                        .replace(/\s+\./g, '.') // Fix spaces before periods
                        .replace(/\.\s+\./g, '.') // Fix double periods with space
                        .replace(/\.\./g, '.') // Fix consecutive periods
                        .replace(/\s{2,}/g, ' '); // Fix multiple spaces
                }

                // Apply our cleaning function to the text
                const fullText = removeFilenameReferences(formattedResponse);
                let position = 0;

                // Clear loading indicator
                contentDiv.innerHTML = '';

                // Function to simulate typing effect
                function simulateTyping() {
                    // Get next chunk of text (can be adjusted for speed)
                    const chunkSize = Math.floor(Math.random() * 10) + 5; // Random chunk size between 5-15 chars
                    const nextChunk = fullText.substring(position, position + chunkSize);
                    position += nextChunk.length;

                    // Add new text
                    displayedText += nextChunk;

                    // Update display with markdown formatting and filename citations as links
                    // First apply markdown parsing
                    let parsedContent = parseMarkdown(displayedText);

                    // Then replace filenames with citation links
                    window.currentCitations.forEach(citation => {
                        const filename = citation.source;
                        const regex = new RegExp(filename, 'g');
                        parsedContent = parsedContent.replace(regex, `<a class="citation-link" onclick="showCitation(${citation.index})">${filename}</a>`);
                    });

                    contentDiv.innerHTML = parsedContent;

                    // Scroll to show new content
                    scrollToBottom();

                    // Continue if not finished
                    if (position < fullText.length) {
                        setTimeout(simulateTyping, 50); // Adjust speed here (lower = faster)
                    } else {
                        // When typing is complete, add references section
                        addReferencesSection();
                    }
                }

                function addReferencesSection() {
                    if (window.currentCitations && window.currentCitations.length > 0) {
                        const referencesSection = document.createElement('div');
                        referencesSection.className = 'references-section';

                        const referencesTitle = document.createElement('h6');
                        referencesTitle.textContent = 'References';
                        referencesSection.appendChild(referencesTitle);

                        const referencesContainer = document.createElement('div');
                        referencesContainer.className = 'references-container';

                        // Add each reference with a clickable link
                        window.currentCitations.forEach((citation) => {
                            const referenceItem = document.createElement('div');
                            referenceItem.className = 'reference-item';

                            // Create a clickable reference link
                            const referenceLink = document.createElement('a');
                            referenceLink.className = 'citation-link';
                            referenceLink.textContent = citation.source;
                            referenceLink.style.cursor = 'pointer';
                            referenceLink.onclick = function() {
                                showCitation(citation.index);
                            };

                            referenceItem.appendChild(referenceLink);
                            referencesContainer.appendChild(referenceItem);
                        });

                        referencesSection.appendChild(referencesContainer);
                        aiMessageDiv.appendChild(referencesSection);

                        // Store citations for reference
                        updateCitationsPanel(window.currentCitations);
                        scrollToBottom();
                    }
                }

                // Start simulated typing
                simulateTyping();
            } catch (error) {
                console.error('Error:', error);
                contentDiv.innerHTML = '<div class="message-error">An error occurred. Please try again.</div>';
            }

            // Re-enable inputs
            messageInput.value = '';
            messageInput.style.height = 'auto'; // Reset height
            messageInput.disabled = false;
            sendButton.disabled = false;
        });
    </script>
}