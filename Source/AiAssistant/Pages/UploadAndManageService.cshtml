@page
@using DotNetOfficeAzureApp.Models
@model DotNetOfficeAzureApp.Pages.UploadAndManageService
@{
    ViewData["Title"] = "Upload and Manage Files";
}

<div class="container">
    <h2>Upload and Manage Files</h2>

    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="upload-form">
        <form method="post" enctype="multipart/form-data" id="uploadForm">
            <input type="hidden" id="selectedAccessLevel" name="AccessLevel" value="@AccessLevel.Private" />
            <input type="hidden" id="selectedUsersHidden" name="SelectedUsers" value="" />
            <input type="hidden" name="UserEmail" value="@HttpContext.Session.GetString("UserEmail")" />

            <div class="form-group">
                <h5>Select Channel</h5>
                <div class="combo-wrapper">
                    <select id="channelSelect" class="form-select combo-select"
                            onchange="handleSelectChange(this)"
                            style="display: none;">
                        @foreach (var container in Model.Containers)
                        {
                            <option value="@container" selected="@(container == Model.SelectedChannel)">@container</option>
                        }
                    </select>
                    <input type="text"
                           id="channelInput"
                           name="SelectedChannel"
                           class="form-control combo-input"
                           value="@(Model.SelectedChannel.Equals("General", StringComparison.OrdinalIgnoreCase) ? "(General)" : Model.SelectedChannel)"
                           autocomplete="off"
                           onclick="showDropdown()"
                           onkeyup="filterOptions(this.value)">
                    <div id="dropdownList" class="dropdown-list" style="display: none;">
                        @foreach (var container in Model.Containers)
                        {
                            <div class="dropdown-item" onclick="selectOption('@container')">@(container.Equals("General", StringComparison.OrdinalIgnoreCase) ? "(General)" : container)</div>
                        }
                    </div>
                    <div class="combo-arrows">▼</div>
                </div>
            </div>

            <div class="form-group mt-3">
                <h5>Choose Files</h5>
                <div class="custom-file-upload">
                    <input type="file"
                           name="files"
                           id="fileInput"
                           class="form-control-file"
                           multiple
                           required
                           style="display: none;"
                           onchange="updateFileList(this)">
                    <div class="file-upload-wrapper">
                        <button type="button"
                                class="btn btn-outline-primary"
                                onclick="document.getElementById('fileInput').click()">
                            Select Files
                        </button>
                        <div id="fileNameDisplay" class="file-name-display mt-2">
                            No files selected
                        </div>
                    </div>
                </div>
            </div>

            <div id="uploadProgressContainer" class="upload-progress-container" style="display: none;">
                <div class="progress-wrapper">
                    <svg class="circular-progress">
                        <circle class="progress-circle-bg"
                                cx="50%"
                                cy="50%"
                                r="42" />
                        <circle class="progress-circle"
                                cx="50%"
                                cy="50%"
                                r="42" />
                    </svg>
                    <div class="progress-text">0%</div>
                </div>
            </div>

            <div class="access-control-section mb-4 mt-3">
                <h5>Access Control</h5>
                <div class="access-options">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="AccessLevelRadio" id="privateAccess"
                               value="@AccessLevel.Private" checked>
                        <label class="form-check-label" for="privateAccess">
                            Private
                        </label>
                        <small class="text-muted d-block">Only you can access this document</small>
                    </div>

                    <div class="form-check mt-2">
                        <input class="form-check-input" type="radio" name="AccessLevelRadio" id="organizationAccess"
                               value="@AccessLevel.Organization">
                        <label class="form-check-label" for="organizationAccess">
                            Everyone in Organization
                        </label>
                        <small class="text-muted d-block">All members of your organization can access</small>
                    </div>

                    <div class="form-check mt-2">
                        <input class="form-check-input" type="radio" name="AccessLevelRadio" id="selectedUsers"
                               value="@AccessLevel.Selected">
                        <label class="form-check-label" for="selectedUsers">
                            Selected Users
                        </label>
                        <small class="text-muted d-block">Only specified users can access</small>

                        <div id="selectedUsersInput" class="mt-2" style="display: none;">
                            <div class="email-tags-container">
                                <div class="tags-input-wrapper">
                                    <div class="tags-container"></div>
                                    <input type="text"
                                           class="form-control email-input"
                                           placeholder="Search users..."
                                           id="emailInput"
                                           autocomplete="off">
                                </div>
                                <div class="email-suggestions" style="display: none;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-primary mt-3" onclick="showUploadProgress(event)">Upload File(s)</button>
        </form>
    </div>

    <div class="mt-4">
        <h5>Files in @(Model.SelectedChannel.Equals("General", StringComparison.OrdinalIgnoreCase) ? "(General)" : Model.SelectedChannel)</h5>
        @if (Model.BlobFileNames.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th style="width: 35%">File Name</th>
                        <th style="width: 15%">Access Level</th>
                        <th style="width: 30%">Users with Access</th>
                        <th style="width: 20%; text-align: right">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var fileName in Model.BlobFileNames)
                    {
                        <tr>
                            <td>@fileName</td>
                            <td>
                                <span class="access-level badge"
                                      data-filename="@fileName"
                                      data-container="@Model.SelectedChannel.ToLower().Replace(" ", "-")"
                                      data-current-user="@HttpContext.Session.GetString("UserEmail")">
                                    Loading...
                                </span>
                            </td>
                            <td>
                                <div class="users-with-access"
                                     data-filename="@fileName"
                                     data-container="@Model.SelectedChannel.ToLower().Replace(" ", "-")"
                                     data-current-user="@HttpContext.Session.GetString("UserEmail")">
                                    Loading...
                                </div>
                            </td>
                            <td style="text-align: right">
                                <form method="post" asp-page-handler="Delete" style="display: inline;">
                                    <input type="hidden" name="fileName" value="@fileName">
                                    <input type="hidden" name="SelectedChannel" value="@Model.SelectedChannel">
                                    <button type="submit" class="btn btn-danger btn-sm"
                                            onclick="return confirm('Are you sure you want to delete this file?')">
                                        Delete
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-info">
                No files found in this channel.
            </div>
        }
    </div>
</div>

<style>
    .access-control-section {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
    }

        .access-control-section h5 {
            color: #333;
            margin-bottom: 1rem;
            font-weight: 500;
        }

    .access-options {
        padding-left: 0.5rem;
    }

    .form-check-input {
        cursor: pointer;
    }

    .form-check-label {
        font-weight: 500;
        color: #444;
        cursor: pointer;
    }

    .text-muted {
        color: #6c757d !important;
        font-size: 0.875rem;
        margin-left: 1.75rem;
    }

    .combo-wrapper {
        position: relative;
        width: 100%;
    }

    .combo-input {
        width: 100%;
        padding-right: 30px;
        cursor: pointer;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .combo-arrows {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        pointer-events: none;
        color: #666;
        font-size: 12px;
    }

    .dropdown-list {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        max-height: 200px;
        overflow-y: auto;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1000;
    }

    .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
    }

        .dropdown-item:hover {
            background-color: #f8f9fa;
        }

    .badge {
        font-size: 0.85rem;
        padding: 0.4em 0.8em;
        border-radius: 4px;
        font-weight: 500;
    }

    .badge-private {
        background-color: #28a745;
        color: white;
    }

    .badge-organization {
        background-color: #dc3545;
        color: white;
    }

    .badge-selected {
        background-color: #fd7e14;
        color: white;
    }

    .access-level-cell {
        vertical-align: middle;
    }

    .email-tags-container {
        position: relative;
        width: 100%;
    }

    .tags-input-wrapper {
        border: 1px solid #ced4da;
        border-radius: 4px;
        padding: 8px;
        background: white;
        min-height: 40px;
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
    }

    .email-input {
        border: none !important;
        outline: none !important;
        box-shadow: none !important;
        flex: 1;
        min-width: 120px;
        padding: 4px !important;
        margin: 0 !important;
    }

    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        margin-bottom: 8px;
    }

    .email-tag {
        display: inline-flex;
        align-items: center;
        background-color: #e9ecef;
        border-radius: 4px;
        padding: 4px 8px;
        font-size: 14px;
        margin: 2px;
    }

    .tag-remove {
        margin-left: 8px;
        cursor: pointer;
        color: #666;
        font-weight: bold;
        padding: 0 4px;
    }

        .tag-remove:hover {
            color: #dc3545;
        }

    .email-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
        margin-top: 4px;
    }

    .suggestion-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 12px;
        cursor: pointer;
        transition: background-color 0.2s;
        color: #333; /* Normal dark gray text color */
        font-weight: normal; /* Regular font weight instead of bold */
    }

        .suggestion-item:hover,
        .suggestion-item.selected {
            background-color: #f8f9fa;
        }

        .suggestion-item span {
            font-weight: normal; /* Ensure normal font weight */
        }

        .suggestion-item small {
            font-size: 0.85em;
            color: #6c757d;
        }

    .file-upload-wrapper {
        border: 1px dashed #ced4da;
        border-radius: 4px;
        padding: 15px;
        text-align: center;
    }

    .file-name-display {
        max-height: 150px;
        overflow-y: auto;
        background-color: #f8f9fa;
        border-radius: 4px;
        padding: 10px;
        margin-top: 10px;
    }

    .file-name-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
        padding: 5px;
        background-color: #e9ecef;
        border-radius: 3px;
    }

        .file-name-item .remove-file {
            cursor: pointer;
            color: #dc3545;
            margin-left: 10px;
        }

    .upload-progress-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .progress-wrapper {
        position: relative;
        width: 100px;
        height: 100px;
    }

    .circular-progress {
        width: 100%;
        height: 100%;
        transform: rotate(-90deg);
    }

    .progress-circle-bg {
        fill: none;
        stroke: #eee;
        stroke-width: 4;
    }

    .progress-circle {
        fill: none;
        stroke: #0d6efd;
        stroke-width: 4;
        stroke-linecap: round;
        transition: stroke-dashoffset 0.1s ease;
    }

    .progress-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 16px;
        font-weight: 500;
        color: #0d6efd;
    }
</style>

@section Scripts {
    <script>
        let searchTimeout;
        let selectedEmails = [];
        const emailInput = document.getElementById('emailInput');
        const suggestionsDiv = document.querySelector('.email-suggestions');
        const tagsContainer = document.querySelector('.tags-container');
        let isDropdownVisible = false;

        // Channel dropdown functions
        function showDropdown() {
            const dropdown = document.getElementById('dropdownList');
            const items = dropdown.getElementsByClassName('dropdown-item');
            for (let item of items) {
                item.style.display = 'block';
            }
            dropdown.style.display = 'block';
            isDropdownVisible = true;
        }

        function hideDropdown() {
            const dropdown = document.getElementById('dropdownList');
            dropdown.style.display = 'none';
            isDropdownVisible = false;
        }

        function selectOption(value) {
            // Display (General) instead of General in the input field
            document.getElementById('channelInput').value = value === 'General' ? '(General)' : value;
            hideDropdown();
            window.location.href = `?handler=Containers&selectedChannel=${encodeURIComponent(value)}`;
        }

        function filterOptions(value) {
            const dropdown = document.getElementById('dropdownList');
            const items = dropdown.getElementsByClassName('dropdown-item');
            
            // Special handling to match both "General" and "(General)"
            const searchText = value.toLowerCase();
            const isGeneralSearch = searchText === '(general)' || searchText === 'general';
            
            for (let item of items) {
                const itemText = item.textContent.toLowerCase();
                const isGeneralItem = itemText === '(general)';
                
                // Show the item if it matches the search or if both are about General
                if ((isGeneralSearch && isGeneralItem) || 
                    (!isGeneralSearch && itemText.includes(searchText))) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            }
            
            dropdown.style.display = 'block';
        }

        // Update the searchUsers function to format the display
        async function searchUsers(query) {
            if (!query || query.length < 1) {
                suggestionsDiv.style.display = 'none';
                return;
            }

            try {
                const response = await fetch(`?handler=Users&search=${encodeURIComponent(query)}`);
                const users = await response.json();
                const currentUserEmail = document.querySelector('input[name="UserEmail"]').value.toLowerCase();

                if (users && users.length > 0) {
                    // Filter out the current user from suggestions
                    const filteredUsers = users.filter(user =>
                        user.email.toLowerCase() !== currentUserEmail &&
                        !selectedEmails.includes(user.email));

                    if (filteredUsers.length === 0) {
                        suggestionsDiv.style.display = 'none';
                        return;
                    }

                    suggestionsDiv.innerHTML = filteredUsers
                        .map(user => `
                                    <div class="suggestion-item" data-email="${user.email}" data-name="${user.name || ''}">
            <span>${user.name || ''} &lt;${user.email}&gt;</span>
        </div>
                        `).join('');

                    const suggestionItems = suggestionsDiv.querySelectorAll('.suggestion-item');
                    suggestionItems.forEach(item => {
                        item.addEventListener('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            const email = this.dataset.email;
                            const name = this.dataset.name || '';
                            addEmailTag(email, name);
                        });

                        item.addEventListener('mouseenter', function() {
                            suggestionItems.forEach(i => i.classList.remove('selected'));
                            this.classList.add('selected');
                        });
                    });

                    suggestionsDiv.style.display = 'block';
                } else {
                    suggestionsDiv.style.display = 'none';
                }
            } catch (error) {
                console.error('Error searching users:', error);
                suggestionsDiv.style.display = 'none';
            }
        }

        // Update the addEmailTag function to only display the name in the tag
        function addEmailTag(email, displayName) {
            if (!selectedEmails.includes(email)) {
                const tag = document.createElement('div');
                tag.className = 'email-tag';
                tag.innerHTML = `
                    ${displayName || email}
                    <span class="tag-remove" onclick="removeEmailTag(this, '${email}')">&times;</span>
                `;
                tag.dataset.email = email;
                tagsContainer.appendChild(tag);
                selectedEmails.push(email);
                updateSelectedUsersHidden();
            }
            emailInput.value = '';
            suggestionsDiv.style.display = 'none';
            emailInput.focus();
        }

        function removeEmailTag(element, email) {
            element.parentElement.remove();
            selectedEmails = selectedEmails.filter(e => e !== email);
            updateSelectedUsersHidden();
        }

        function updateSelectedUsersHidden() {
            document.getElementById('selectedUsersHidden').value = selectedEmails.join(',');
        }


        // File upload functions
        function updateFileList(input) {
            const fileNameDisplay = document.getElementById('fileNameDisplay');
            const files = input.files;

            if (files.length === 0) {
                fileNameDisplay.innerHTML = 'No files selected';
                return;
            }

            const fileListContainer = document.createElement('div');

            Array.from(files)
                .sort((a, b) => a.name.localeCompare(b.name))
                .forEach((file, index) => {
                    const fileNameItem = document.createElement('div');
                    fileNameItem.className = 'file-name-item';

                    const fileName = document.createElement('span');
                    fileName.textContent = `${index + 1}. ${file.name} (${formatFileSize(file.size)})`;

                    const removeButton = document.createElement('span');
                    removeButton.innerHTML = '&times;';
                    removeButton.className = 'remove-file';
                    removeButton.title = 'Remove file';
                    removeButton.onclick = () => removeFile(index);

                    fileNameItem.appendChild(fileName);
                    fileNameItem.appendChild(removeButton);
                    fileListContainer.appendChild(fileNameItem);
                });

            fileNameDisplay.innerHTML = '';
            fileNameDisplay.appendChild(fileListContainer);
        }

        function removeFile(index) {
            const input = document.getElementById('fileInput');
            const dt = new DataTransfer();

            for (let i = 0; i < input.files.length; i++) {
                if (i !== index) {
                    dt.items.add(input.files[i]);
                }
            }

            input.files = dt.files;
            updateFileList(input);
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Progress and upload functions
        function initProgress() {
            const circle = document.querySelector('.progress-circle');
            const circumference = 2 * Math.PI * 42;
            circle.style.strokeDasharray = `${circumference} ${circumference}`;
            circle.style.strokeDashoffset = circumference;
        }

        function setProgress(percent) {
            const circle = document.querySelector('.progress-circle');
            const text = document.querySelector('.progress-text');
            const circumference = 2 * Math.PI * 42;
            const offset = circumference - (percent / 100 * circumference);
            circle.style.strokeDashoffset = offset;
            text.textContent = `${Math.round(percent)}%`;
        }

        function showUploadProgress(event) {
            event.preventDefault();

            const fileInput = document.getElementById('fileInput');
            if (fileInput.files.length === 0) {
                alert('Please select files to upload');
                return;
            }

            // CRITICAL FIX: Convert (General) to General before submission
            const channelInput = document.getElementById('channelInput');
            const originalValue = channelInput.value;
            if (channelInput.value === '(General)') {
                channelInput.value = 'General';
            }

            const progressContainer = document.getElementById('uploadProgressContainer');
            const form = event.target.closest('form');
            const submitButton = event.target;

            progressContainer.style.display = 'flex';
            initProgress();
            setProgress(0);
            submitButton.disabled = true;

            const formData = new FormData(form);
            const xhr = new XMLHttpRequest();
            xhr.open('POST', form.action, true);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            xhr.timeout = 300000; // 5 minutes

            xhr.upload.onprogress = function(event) {
                if (event.lengthComputable) {
                    const percent = (event.loaded / event.total) * 100;
                    setProgress(percent);
                }
            };

            xhr.onload = function() {
                if (xhr.status === 200) {
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            setProgress(100);
                            setTimeout(() => {
                                // Important: Use the original backend value (General) for redirection, not (General)
                                const redirectChannel = originalValue === '(General)' ? 'General' : originalValue;
                                window.location.href = window.location.pathname +
                                    '?handler=Containers&selectedChannel=' +
                                    encodeURIComponent(redirectChannel);
                            }, 500);
                        } else {
                            handleUploadError(response.message || 'Upload failed');
                            // Restore display value
                            channelInput.value = originalValue;
                        }
                    } catch (error) {
                        handleUploadError('Error processing response');
                        // Restore display value
                        channelInput.value = originalValue;
                    }
                } else {
                    handleUploadError('Server error occurred');
                    // Restore display value
                    channelInput.value = originalValue;
                }
            };

            xhr.onerror = function() {
                handleUploadError('Network error occurred');
                // Restore display value
                channelInput.value = originalValue;
            };

            xhr.ontimeout = function() {
                handleUploadError('Upload timed out');
                // Restore display value
                channelInput.value = originalValue;
            };

            function handleUploadError(message) {
                console.error('Upload error:', message);
                progressContainer.style.display = 'none';
                submitButton.disabled = false;
                alert(message + '. Please try again.');
                // Restore display value
                channelInput.value = originalValue;
            }

            try {
                xhr.send(formData);
            } catch (error) {
                handleUploadError('Error starting upload');
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', async function() {
            // Ensure (General) display is shown for General
            const channelInput = document.getElementById('channelInput');
            if (channelInput.value === 'General') {
                channelInput.value = '(General)';
            }
            
            // Load access levels for files
            document.querySelectorAll('.access-level, .users-with-access').forEach(async element => {
                const fileName = element.dataset.filename;
                const containerName = element.dataset.container;
                const currentUser = element.dataset.currentUser;
                const isAccessLevel = element.classList.contains('access-level');

                try {
                    const response = await fetch(`?handler=AccessControl&fileName=${encodeURIComponent(fileName)}&containerName=${encodeURIComponent(containerName)}`);
                    const data = await response.json();

                    if (isAccessLevel) {
                        // Handle access level badges
                        let accessLevelText = 'Private';
                        let badgeClass = 'badge-private';

                        if (data.isOpen) {
                            accessLevelText = 'Organization';
                            badgeClass = 'badge-organization';
                        } else if (data.acl && data.acl.length >= 1) {
                            if (data.acl.length > 1 || (data.acl.length === 1 && data.acl[0].toLowerCase() !== currentUser.toLowerCase())) {
                                accessLevelText = 'Selected Users';
                                badgeClass = 'badge-selected';
                            }
                        }

                        element.textContent = accessLevelText;
                        element.classList.add(badgeClass);
                    } else {
                        // Handle users with access display
                        if (data.isOpen) {
                            element.innerHTML = '<span class="text-muted">All organization members</span>';
                        } else if (data.acl && data.acl.length > 0) {
                            // Filter out current user for display
                            const otherUsers = data.acl.filter(email =>
                                email.toLowerCase() !== currentUser.toLowerCase()
                            );

                            if (otherUsers.length === 0) {
                                element.innerHTML = '<span class="text-muted">Only you</span>';
                            } else {
                                // Display other users
                                const userDisplayText = otherUsers
                                    .slice(0, 3) // Show first 3 users
                                    .join(', ');

                                const moreUsers = otherUsers.length > 3
                                    ? ` <span class="text-muted">and ${otherUsers.length - 3} more</span>`
                                    : '';

                                element.innerHTML = `${userDisplayText}${moreUsers}`;

                                // Add tooltip with all users
                                if (otherUsers.length > 3) {
                                    element.title = otherUsers.element.title = otherUsers.join('\n');
                                    element.style.cursor = 'help';
                                }
                            }
                        } else {
                            element.innerHTML = '<span class="text-muted">Only you</span>';
                        }
                    }
                } catch (error) {
                    console.error('Error loading access control:', error);
                    element.textContent = 'Error';
                    if (isAccessLevel) {
                        element.classList.add('badge-danger');
                    }
                }
            });

            // Setup access level radio buttons
            document.querySelectorAll('input[name="AccessLevelRadio"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    document.getElementById('selectedAccessLevel').value = this.value;
                    document.getElementById('selectedUsersInput').style.display =
                        this.value === 'Selected' ? 'block' : 'none';

                    if (this.value !== 'Selected') {
                        document.getElementById('selectedUsersHidden').value = '';
                        tagsContainer.innerHTML = '';
                        selectedEmails = [];
                    }
                });
            });

            // Setup email input
            emailInput.addEventListener('input', function() {
                const query = this.value.trim();
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    searchUsers(query);
                }, 300);
            });

            emailInput.addEventListener('keydown', function(e) {
                const suggestionItems = suggestionsDiv.querySelectorAll('.suggestion-item');
                let selectedIndex = Array.from(suggestionItems).findIndex(item =>
                    item.classList.contains('selected'));

                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        if (selectedIndex < suggestionItems.length - 1) {
                            if (selectedIndex >= 0) suggestionItems[selectedIndex].classList.remove('selected');
                            suggestionItems[selectedIndex + 1].classList.add('selected');
                        } else if (selectedIndex === -1 && suggestionItems.length > 0) {
                            suggestionItems[0].classList.add('selected');
                        }
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        if (selectedIndex > 0) {
                            suggestionItems[selectedIndex].classList.remove('selected');
                            suggestionItems[selectedIndex - 1].classList.add('selected');
                        }
                        break;
                    case 'Enter':
                        e.preventDefault();
                        const selectedSuggestion = suggestionsDiv.querySelector('.suggestion-item.selected');
                        if (selectedSuggestion) {
                            const email = selectedSuggestion.dataset.email;
                            const name = selectedSuggestion.dataset.name || '';
                            addEmailTag(email, name);
                        }
                        break;
                    case 'Escape':
                        suggestionsDiv.style.display = 'none';
                        break;
                }
            });

            // Handle clicks outside of suggestions
            document.addEventListener('click', function(e) {
                if (!emailInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                    suggestionsDiv.style.display = 'none';
                }
            });

            // Initial state for selected users input
            const selectedUsersRadio = document.getElementById('selectedUsers');
            if (selectedUsersRadio?.checked) {
                document.getElementById('selectedUsersInput').style.display = 'block';
            }
        });

        // Channel dropdown click handler
        document.addEventListener('click', function(e) {
            const input = document.getElementById('channelInput');
            const dropdown = document.getElementById('dropdownList');

            if (e.target !== input && isDropdownVisible) {
                hideDropdown();
            }
        });

        document.getElementById('dropdownList')?.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        // Fix for delete form to handle (General) properly
        document.querySelectorAll('form[asp-page-handler="Delete"]').forEach(form => {
            form.addEventListener('submit', function() {
                const channelInputs = this.querySelectorAll('input[name="SelectedChannel"]');
                channelInputs.forEach(input => {
                    if (input.value === '(General)') {
                        input.value = 'General';
                    }
                });
            });
        });
    </script>
}